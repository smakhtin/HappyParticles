Texture2D tex0 : PREVIOUS;
Texture2D tex1 <string uiname="Control";>;

float2 R:TARGETSIZE;

cbuffer controls:register(b0){
	bool Aspect;

	float BlurWidth <float uimin = -1.0; float uimax = 1.0;> = 0.2;
	float BlurDir <float uimin = -1.0; float uimax = 1.0;> = 0.0;
	float MapSmooth <float uimin = 0.0; float uimax = 1.0;> = 0.1;
	float Width = 1;
	float4 BorderCol:COLOR = {0.0,0.0,0.0,1.0};
};

SamplerState s0 <bool visible=false;string uiname="Sampler";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};
SamplerState s1 <bool visible=false;string uiname="Sampler Control";> {Filter=MIN_MAG_MIP_LINEAR;AddressU=CLAMP;AddressV=CLAMP;};

float2 r2d(float2 x,float a)
{
	a *= acos(-1)*2;
	return float2(cos(a) * x.x + sin(a) *x.y, cos(a) * x.y - sin(a) * x.x);
}

float4 pBlurFlow(float4 PosWVP:SV_POSITION, float2 x:TEXCOORD0):SV_Target
{
	float2 asp = lerp(1, R.x / R, Aspect);
	float lod = 1 + saturate(MapSmooth) * log2(max(R.x, R.y));
	float4 c = 0;
	float kk = 0;
	float wd = pow(Width, .1) * .25 * BlurWidth;
	float ang = abs(tex1.SampleLevel(s1, x, 0).x - .5);
	float2 dir = sin((ang + BlurDir + float2(0, .25)) * acos(-1) * 2);
	float2 off = pow(2, MapSmooth * 6) * R / R.x;

	dir = float2(tex1.SampleLevel(s1, x - off * float2(1, 0) / R, lod, 0).g - tex1.SampleLevel(s1, x + off * float2(1, 0) / R, lod, 0).g, tex1.SampleLevel(s1, x - off * float2(0, 1)/R, lod, 0).g - tex1.SampleLevel(s1, x + off * float2(0, 1) / R, lod, 0).g);
	dir = normalize(r2d(dir, BlurDir / 2 + .25)) * pow(length(dir.xy), 1) * 158 * pow(2, MapSmooth * 6);

	for (float i = 0; i < 1; i += 1./16)
	{
		float k = 1;
		c += tex0.SampleLevel(s0, (x / asp + wd * dir * wd * (i)) * asp, 0) * k;
		kk += k;
	}
	c = c / kk;
	return c;
}

technique11 Main{
	pass P0 <bool mips=true;>
	{SetPixelShader(CompileShader(ps_4_0, pBlurFlow()));}
	pass P1
	{SetPixelShader(CompileShader(ps_4_0, pBlurFlow()));}
}